package rune:runtime;

/// A GPU API based on the WebGPU API

interface gpu {
  /// Request a surface from the host.
  surface: func() -> gpu-surface;
  /// Requests an adapter from the host. The host chooses an adapter according to the user's preferences.
  request-adapter: func() -> gpu-adapter;

  /// A resource which represents a GPU surface.
  resource gpu-surface {
    /// Get the current texture for GPU surface.
    current-texture: func() -> gpu-texture;
  }

  /// A resource which represents a GPU query set.
  resource gpu-query-set {
    /// Type of query for this query set.
    %type: func() -> gpu-query-type;
    /// Number of queries for this query set.
    count: func() -> gpu-size-u32-out;
    /// Disposes of the query set.
    destroy: func();
  }

  /// Specifies the options to use in creating a gpu-query-set.
  record gpu-query-set-descriptor {
    /// Label for the query set.
    label: string,
    /// Type of the query set.
    %type: gpu-query-type,
    /// Number of queries for the query set.
    count: gpu-size-u32
  }

  enum gpu-query-type {
    /// Query the number of fragment samples that pass all the per-fragment tests for a set of drawing commands.
    occlusion,
    /// Timestamp queries allow applications to write timestamps to a gpu-query-set.
    timestamp
  }

  /// Buffer data represented as bytes.
  type buffer-source = list<u8>;

  /// Describes a buffer and optional range to bind as a resource.
  record gpu-buffer-binding {
    /// The gpu-buffer to bind.
    buffer: borrow<gpu-buffer>,
    /// The offset, in bytes, from the beginning of buffer to the beginning of the range exposed to the shader by the buffer binding.
    offset: gpu-size-u64,
    /// The size, in bytes, of the buffer binding. If not provided, specifies the range starting at offset and ending at the end of buffer.
    size: option<gpu-size-u64>
  }
  
  /// Dynamic offset to a GPU buffer.
  type gpu-buffer-dynamic-offset = u32;
  /// Integer for a coordinate component.
  type gpu-integer-coordinate = u32;
  /// An unsigned 32-bit index.
  type gpu-index-u32 = u32;
  /// Format for an index, specifying either unsigned 16- or 32-bit indices.
  enum gpu-index-format {
    uint16,
    uint32
  }

  /// A size, represented as an unsigned 32-bit integer.
  type gpu-size-u32 = u32;
  /// A size, represented as an unsigned 64-bit integer.
  type gpu-size-u64 = u64;
  type gpu-size-u32-out = u32;
  type gpu-signed-offset-s32 = s32;
  record gpu-extent-d3 {
    width: gpu-integer-coordinate,
    height: gpu-integer-coordinate,
    depth-or-array-layers: gpu-integer-coordinate
  }

  /// An adapter identifies a GPU implementation on the system. This is how you access the GPU hardware device.
  resource gpu-adapter {
    /// Request the GPU device from the adapter.
    request-device: func() -> gpu-device;
  }

  /// A device is the logical instantiation of an adapter, through which GPU interfaces are created.
  resource gpu-device {
    queue: func() -> gpu-queue;

    /// Create a buffer from a buffer descriptor.
    create-buffer: func(descriptor: gpu-buffer-descriptor) -> gpu-buffer;
    /// Create a texture from a texture descriptor.
    create-texture: func(descriptor: gpu-texture-descriptor) -> gpu-texture;
    /// Create a sampler from a sampler descriptor.
    create-sampler: func(descriptor: gpu-sampler-descriptor) -> gpu-sampler;
    /// Import an external texture from a texture descriptor.
    import-external-texture: func(descriptor: gpu-external-texture-descriptor) -> gpu-external-texture;
    /// Create a bind group layout from a descriptor.
    create-bind-group-layout: func(descriptor: gpu-bind-group-layout-descriptor) -> gpu-bind-group-layout;
    /// Create a pipeline layout from a descriptor.
    create-pipeline-layout: func(descriptor: gpu-pipeline-layout-descriptor) -> gpu-pipeline-layout;
    /// Createa a bind group from a descriptor.
    create-bind-group: func(descriptor: gpu-bind-group-descriptor) -> gpu-bind-group;
    /// Create a shader module from a descriptor.
    create-shader-module: func(descriptor: gpu-shader-module-descriptor) -> gpu-shader-module;
    /// Create a compute pipeline from a descriptor.
    create-compute-pipeline: func(descriptor: gpu-compute-pipeline-descriptor) -> gpu-compute-pipeline;
    /// Create a render pipeline from a descriptor.
    create-render-pipeline: func(descriptor: gpu-render-pipeline-descriptor) -> gpu-render-pipeline;
    /// Create a command encoder from a descriptor.
    create-command-encoder: func(descriptor: gpu-command-encoder-descriptor) -> gpu-command-encoder;
    /// Create a render bundle encoder from a descriptor.
    create-render-bundle-encoder: func(descriptor: gpu-render-bundle-descriptor) -> gpu-render-bundle-encoder;
    /// Create a query set from a descriptor.
    create-query-set: func(descriptor: gpu-query-set-descriptor) -> gpu-query-set;
  }

  /// Options for GPU device.
  record gpu-device-descriptor {
    label: option<string>,
    required-features: list<gpu-feature-name>,
    required-limits: list<tuple<string, gpu-size-u64>>,
    default-queue: option<gpu-queue-descriptor>
  }

  /// GPU feature names
  enum gpu-feature-name {
    depth-clip-control,
    depth32float-stencil8,
    texture-compression-bc,
    texture-compression-etc2,
    texture-compression-astc,
    timestamp-query,
    indirect-first-instance,
    shader-f16,
    rg11b10ufloat-renderable,
    bgra8unorm-storage,
    float32-filterable,
  }

  /// GPUQueue
  resource gpu-queue {
    submit: func(command-buffers: list<gpu-command-buffer>);
    write-buffer: func(buffer: borrow<gpu-buffer>, buffer-offset: gpu-size-u64, data: buffer-source, data-offset: gpu-size-u64, size: gpu-size-u64);
    write-texture: func(destination: gpu-image-copy-texture, data: buffer-source, data-layout: gpu-image-data-layout, size: gpu-extent-d3);
    copy-external-image-to-texture: func(source: gpu-image-copy-external-image, destination: gpu-image-copy-texture-tagged, copy-size: gpu-extent-d3);
  }

  /// Options for GPU queue
  record gpu-queue-descriptor {
    label: option<string>,
  }

  /// GPU image data layout options.
  record gpu-image-data-layout {
    offset: gpu-size-u64,
    bytes-per-row: gpu-size-u32,
    rows-per-image: gpu-size-u32
  }


  /// Buffers

  /// GPUBuffer
  resource gpu-buffer {
    /// The size of the buffer
    size: func() -> gpu-size-u64;
    /// Usage modes for the buffer
    usage: func() -> gpu-buffer-usage;

    /// State of GPU buffer map
    map-state: func() -> gpu-buffer-map-state;
    /// Map the GPU buffer
    map: func(mode: gpu-map-mode, offset: gpu-size-u64, size: gpu-size-u64);
    /// Get a range of bytes from the buffer
    get-mapped-range: func(offset: gpu-size-u64, size: gpu-size-u64) -> list<u8>;
    /// Unmap the GPU buffer
    unmap: func();
    /// Destroy the GPU buffer
    destroy: func();
  }

  /// Options for GPU buffer
  record gpu-buffer-descriptor {
    label: option<string>,
    size: gpu-size-u64,
    usage: gpu-buffer-usage,
    contents: option<buffer-source>,
    mapped-at-creation: bool
  }

  /// GPU buffer usage modes
  flags gpu-buffer-usage {
    map-read,
    map-write,
    copy-src,
    copy-dst,
    index,
    vertex,
    uniform,
    storage,
    indirect,
    query-resolve
  }

  /// GPU buffer map states
  enum gpu-buffer-map-state {
    unmapped,
    pending,
    mapped
  }

  /// GPU map modes
  flags gpu-map-mode {
    read,
    write
  }

  /// Textures and Texture Views

  /// GPUTexture
  resource gpu-texture {
    /// Get the texture width.
    width: func() -> gpu-integer-coordinate;
    /// Get the texture height.
    height: func() -> gpu-integer-coordinate;
    /// Get the depth or array layers of the texture.
    depth-or-array-layers: func() -> gpu-integer-coordinate;
    /// Get the mip level count for the texture.
    mip-level-count: func() -> gpu-integer-coordinate;
    /// Get the sample count for the texture.
    sample-count: func() -> gpu-size-u32;
    /// Get the number of dimensions for the texture.
    dimension: func() -> gpu-texture-dimension;
    /// Get the format of the texture.
    format: func() -> gpu-texture-format;
    /// Get the usage mode for the texture.
    usage: func() -> gpu-texture-usage;
    /// Create a view of the texture.
    create-view: func() -> gpu-texture-view;
    /// Destroy the texture.
    destroy: func();
  }

  /// Options for the GPU texture
  record gpu-texture-descriptor {
    size: gpu-extent-d3,
    mip-level-count: gpu-integer-coordinate,
    sample-count: gpu-size-u32,
    dimension: gpu-texture-dimension,
    format: gpu-texture-format,
    usage: gpu-texture-usage,
    view-formats: list<gpu-texture-format>
  }

  /// GPU texture dimensions
  enum gpu-texture-dimension {
    d1,
    d2,
    d3
  }

  /// GPU texture formats
  enum gpu-texture-format {
    // 8-bit formats
    r8unorm,
    r8snorm,
    r8uint,
    r8sint,

    // 16-bit formats
    r16uint,
    r16sint,
    r16float,
    rg8unorm,
    rg8snorm,
    rg8uint,
    rg8sint,

    // 32-bit formats
    r32uint,
    r32sint,
    r32float,
    rg16uint,
    rg16sint,
    rg16float,
    rgba8unorm,
    rgba8unormsrgb,
    rgba8snorm,
    rgba8uint,
    rgba8sint,
    bgra8unorm,
    bgra8unormsrgb,
    // Packed 32-bit formats
    rgb9e5ufloat,
    rgb10a2unorm,
    rg11b10ufloat,

    // 64-bit formats
    rg32uint,
    rg32sint,
    rg32float,
    rgba16uint,
    rgba16sint,
    rgba16float,

    // 128-bit formats
    rgba32uint,
    rgba32sint,
    rgba32float,

    // Depth/stencil formats
    stencil8,
    depth16unorm,
    depth24plus,
    depth24plusstencil8,
    depth32float,

    // depth32floatstencil8 feature
    depth32floatstencil8,

    // BC compressed formats usable if texturecompressionbc is both
    // supported by the device/user agent and enabled in requestDevice.
    bc1rgbaunorm,
    bc1rgbaunormsrgb,
    bc2rgbaunorm,
    bc2rgbaunormsrgb,
    bc3rgbaunorm,
    bc3rgbaunormsrgb,
    bc4runorm,
    bc4rsnorm,
    bc5rgunorm,
    bc5rgsnorm,
    bc6hrgbufloat,
    bc6hrgbfloat,
    bc7rgbaunorm,
    bc7rgbaunormsrgb,

    // ETC2 compressed formats usable if texturecompressionetc2 is both
    // supported by the device/user agent and enabled in requestDevice.
    etc2rgb8unorm,
    etc2rgb8unormsrgb,
    etc2rgb8a1unorm,
    etc2rgb8a1unormsrgb,
    etc2rgba8unorm,
    etc2rgba8unormsrgb,
    eacr11unorm,
    eacr11snorm,
    eacrg11unorm,
    eacrg11snorm,

    // ASTC compressed formats usable if texturecompressionastc is both
    // supported by the device/user agent and enabled in requestDevice.
    astc4x4unorm,
    astc4x4unormsrgb,
    astc5x4unorm,
    astc5x4unormsrgb,
    astc5x5unorm,
    astc5x5unormsrgb,
    astc6x5unorm,
    astc6x5unormsrgb,
    astc6x6unorm,
    astc6x6unormsrgb,
    astc8x5unorm,
    astc8x5unormsrgb,
    astc8x6unorm,
    astc8x6unormsrgb,
    astc8x8unorm,
    astc8x8unormsrgb,
    astc10x5unorm,
    astc10x5unormsrgb,
    astc10x6unorm,
    astc10x6unormsrgb,
    astc10x8unorm,
    astc10x8unormsrgb,
    astc10x10unorm,
    astc10x10unormsrgb,
    astc12x10unorm,
    astc12x10unormsrgb,
    astc12x12unorm,
    astc12x12unormsrgb,
  }

  /// GPU texture usage modes
  flags gpu-texture-usage {
    copy-src,
    copy-dst,
    texture-binding,
    storage-binding,
    render-attachment
  }

  /// GPU texture aspects
  enum gpu-texture-aspect {
    all,
    stencil-only,
    depth-only
  }

  /// GPUTextureView
  resource gpu-texture-view {
    
  }

  /// Options for the texture view
  record gpu-texture-view-descriptor {
    label: option<string>,
    format: gpu-texture-format,
    dimension: gpu-texture-view-dimension,
    aspect: gpu-texture-aspect,
    base-mip-level: gpu-integer-coordinate,
    mip-level-count: gpu-integer-coordinate,
    base-array-layer: gpu-integer-coordinate,
    array-layer-count: gpu-integer-coordinate
  }

  /// GPU texture view dimensions
  enum gpu-texture-view-dimension {
    d1,
    d2,
    d2-array,
    cube,
    cube-array,
    d3
  }

  resource gpu-external-texture {
    
  }

  /// Options for external GPU texture
  record gpu-external-texture-descriptor {
    label: option<string>,
    // source: [video handle]
    color-space: option<predefined-color-space>
  }

  /// Color space for external texture
  enum predefined-color-space {
    srgb,
    display-p3
  }


  /// Samples

  /// GPUSampler
  resource gpu-sampler {
    
  }

  record gpu-sampler-descriptor {
    label: option<string>,
    address-mode-u: gpu-address-mode,
    address-mode-v: gpu-address-mode,
    address-mode-w: gpu-address-mode,
    mag-filter: gpu-filter-mode,
    min-filter: gpu-filter-mode,
    mipmap-filter: gpu-filter-mode,
    lod-min-clamp: f32,
    lod-max-clamp: f32,
    compare: option<gpu-compare-function>,
    max-anisotrophy: u16
  }

  enum gpu-address-mode {
    clamp-to-edge,
    repeat,
    mirror-repeat
  }

  enum gpu-filter-mode {
    nearest,
    linear
  }

  enum gpu-compare-function {
    never,
    less,
    equal,
    less-equal,
    greater,
    not-equal,
    greater-equal,
    always
  }

  /// Resource Binding

  /// GPUBindGroupLayout
  resource gpu-bind-group-layout {
    
  }

  record gpu-bind-group-layout-descriptor {
    entries: list<gpu-bind-group-layout-entry>
  }

  record gpu-bind-group-layout-entry {
    binding: gpu-index-u32,
    visibility: gpu-shader-stage,
    buffer: option<gpu-buffer-binding-layout>,
    sampler: option<gpu-sampler-binding-layout>,
    texture: option<gpu-texture-binding-layout>,
    storage-texture: option<gpu-storage-texture-binding-layout>,
    external-texture: option<gpu-external-texture-binding-layout>
  }

  flags gpu-shader-stage {
    vertex,
    fragment,
    compute
  }

  record gpu-buffer-binding-layout {
    %type: gpu-buffer-binding-type,
    has-dynamic-offset: bool,
    min-binding-size: gpu-size-u64
  }

  enum gpu-buffer-binding-type {
    uniform,
    storage,
    read-only-storage
  }

  record gpu-sampler-binding-layout {
    %type: gpu-sampler-binding-type
  }

  enum gpu-sampler-binding-type {
    filtering,
    non-filtering,
    comparison
  }

  record gpu-texture-binding-layout {
    sample-type: gpu-texture-sample-type,
    view-dimension: gpu-texture-view-dimension,
    multisampled: bool
  }

  enum gpu-texture-sample-type {
    float,
    unfilterable-float,
    depth,
    sint,
    uint
  }

  record gpu-storage-texture-binding-layout {
    access: gpu-storage-texture-access,
    format: gpu-texture-format,
    view-dimension: gpu-texture-view-dimension
  }

  enum gpu-storage-texture-access {
    write-only
  }

  record gpu-external-texture-binding-layout {
    label: option<string>,
  }

  /// GPUBindGroup

  resource gpu-bind-group {
  }

  record gpu-bind-group-descriptor {
    label: option<string>,
    layout: borrow<gpu-bind-group-layout>,
    entries: list<gpu-bind-group-entry>
  }

  record gpu-bind-group-entry {
    binding: gpu-index-u32,
    %resource: gpu-binding-resource
  }

  variant gpu-binding-resource {
    buffer(gpu-buffer-binding),
    buffer-array(list<gpu-buffer-binding>),
    sampler(borrow<gpu-sampler>),
    sampler-array(list<borrow<gpu-sampler>>),
    texture-view(borrow<gpu-texture-view>),
    texture-view-array(list<borrow<gpu-texture-view>>)
  }

  /// GPUPipelineLayout

  resource gpu-pipeline-layout {
    
  }

  record gpu-pipeline-layout-descriptor {
    bind-group-layouts: list<borrow<gpu-bind-group-layout>>
  }


  /// Shader Modules

  /// GPUShaderModule
  resource gpu-shader-module {
    get-compilation-info: func() -> gpu-compilation-info;
  }

  record gpu-shader-module-descriptor {
    label: option<string>,
    code: string,
    hints: list<tuple<string, gpu-shader-module-compilation-hint>>
  }

  record gpu-compilation-info {
    messages: list<gpu-compilation-message>
  }

  record gpu-shader-module-compilation-hint {
    layout: gpu-layout
  }

  variant gpu-layout {
    auto,
    pipeline(borrow<gpu-pipeline-layout>)
  }

  record gpu-compilation-message {
    message: string,
    %type: gpu-compilation-message-type,
    line-num: u64,
    line-pos: u64,
    offset: u64,
    length: u64
  }

  enum gpu-compilation-message-type {
    error,
    warning,
    info
  }


  /// Pipelines

  variant gpu-pipeline-constant-value {
    %bool(bool),
    f16(f32),
    %f32(f32),
    i32(s32),
    %u32(u32)
  }

  variant gpu-pipeline {
    render(gpu-render-pipeline),
    compute(gpu-compute-pipeline)
  }

  /// GPUComputePipeline
  resource gpu-compute-pipeline {
    get-bind-group-layout: func(index: u32) -> gpu-bind-group-layout;
  }

  record gpu-compute-pipeline-descriptor {
    layout: gpu-layout,
    compute: gpu-programmable-stage
  }

  record gpu-programmable-stage {
    module: borrow<gpu-shader-module>,
    entry-point: string,
    constants: list<tuple<string, gpu-pipeline-constant-value>>
  }

  /// GPURenderPipeline
  resource gpu-render-pipeline {
    get-bind-group-layout: func(index: u32) -> gpu-bind-group-layout;
  }

  record gpu-render-pipeline-descriptor {
    layout: gpu-layout,
    vertex: gpu-vertex-state,
    primitive: option<gpu-primitive-state>,
    depth-stencil: option<gpu-depth-stencil-state>,
    multisample: option<gpu-multisample-state>,
    fragment: option<gpu-fragment-state>
  }

  record gpu-vertex-state {
    module: borrow<gpu-shader-module>,
    entry-point: string,
    constants: list<tuple<string, gpu-pipeline-constant-value>>,
    buffers: option<list<gpu-vertex-buffer-layout>>
  }

  record gpu-vertex-buffer-layout {
    array-stride: gpu-size-u64,
    step-mode: gpu-vertex-step-mode,
    attributes: list<gpu-vertex-attribute>
  }

  enum gpu-vertex-step-mode {
    vertex,
    instance
  }

  record gpu-vertex-attribute {
    format: gpu-vertex-format,
    offset: gpu-size-u64,
    shader-location: gpu-index-u32
  }

  enum gpu-vertex-format {
    uint8x2,
    uint8x4,
    sint8x2,
    sint8x4,
    unorm8x2,
    unorm8x4,
    snorm8x2,
    snorm8x4,
    uint16x2,
    uint16x4,
    sint16x2,
    sint16x4,
    unorm16x2,
    unorm16x4,
    snorm16x2,
    snorm16x4,
    float16x2,
    float16x4,
    %float32,
    float32x2,
    float32x3,
    float32x4,
    uint32,
    uint32x2,
    uint32x3,
    uint32x4,
    sint32,
    sint32x2,
    sint32x3,
    sint32x4
  }

  record gpu-fragment-state {
    module: borrow<gpu-shader-module>,
    entry-point: string,
    constants: list<tuple<string, gpu-pipeline-constant-value>>,
    targets: list<gpu-color-target-state>
  }

  record gpu-color-target-state {
    format: gpu-texture-format,
    blend: option<gpu-blend-state>,
    write-mask: option<gpu-color-write>
  }

  record gpu-blend-state {
    color: gpu-blend-component,
    alpha: gpu-blend-component
  }

  flags gpu-color-write {
    red,
    green,
    blue,
    alpha,
    all
  }

  record gpu-blend-component {
    operation: option<gpu-blend-operation>,
    src-factor: option<gpu-blend-factor>,
    dst-factor: option<gpu-blend-factor>
  }

  enum gpu-blend-operation {
    add,
    subtract,
    reverse-subtract,
    min,
    max
  }

  enum gpu-blend-factor {
    zero,
    one,
    src,
    one-minus-src,
    src-alpha,
    one-minus-src-alpha,
    dst,
    one-minus-dst,
    dst-alpha,
    one-minus-dst-alpha,
    src-alpha-saturated,
    constant,
    one-minus-constant
  }

  record gpu-primitive-state {
    topology: option<gpu-primitive-topology>,
    strip-index-format: option<gpu-index-format>,
    front-face: option<gpu-front-face>,
    cull-mode: gpu-cull-mode,
    unclipped-depth: bool
  }

  enum gpu-primitive-topology {
    point-list,
    line-list,
    line-strip,
    triangle-list,
    triangle-strip
  }

  enum gpu-front-face {
    ccw,
    cw
  }

  enum gpu-cull-mode {
    none,
    front,
    back
  }

  record gpu-depth-stencil-state {
    format: gpu-texture-format,
    depth-write-enabled: bool,
    depth-compare: gpu-compare-function,
    stencil-front: option<gpu-stencil-face-state>,
    stencil-back: option<gpu-stencil-face-state>,
    stencil-read-mask: option<gpu-stencil-value>,
    stencil-write-mask: option<gpu-stencil-value>,
    depth-bias: option<gpu-depth-bias>,
    depth-bias-slope-scale: option<f32>,
    depth-bias-clamp: option<f32>
  }

  record gpu-stencil-face-state {
    compare: option<gpu-compare-function>,
    fail-op: option<gpu-stencil-operation>,
    depth-fail-op: option<gpu-stencil-operation>,
    pass-op: option<gpu-stencil-operation>
  }

  enum gpu-stencil-operation {
    keep,
    zero,
    replace,
    invert,
    increment-clamp,
    decrement-clamp,
    increment-wrap,
    decrement-wrap
  }

  type gpu-stencil-value = u32;

  type gpu-depth-bias = s32;

  record gpu-multisample-state {
    count: gpu-size-u32,
    mask: gpu-sample-mask,
    alpha-to-coverage-enabled: bool
  }

  type gpu-sample-mask = u32;

  /// Copies

  record gpu-image-copy-buffer {
    buffer: borrow<gpu-buffer>,
    layout: gpu-image-data-layout
  }

  record gpu-image-copy-texture {
    texture: borrow<gpu-texture>,
    mip-level: gpu-integer-coordinate,
    origin: gpu-origin-d3,
    aspect: gpu-texture-aspect
  }

  type gpu-origin-d3 = list<gpu-integer-coordinate>;

  record gpu-image-copy-texture-tagged {
    texture: borrow<gpu-texture>,
    mip-level: gpu-integer-coordinate,
    origin: gpu-origin-d3,
    aspect: gpu-texture-aspect,
    color-space: predefined-color-space,
    premultiplied-alpha: bool
  }

  record gpu-image-copy-external-image {
    source: gpu-image-copy-external-image-source,
    origin: gpu-origin-d2,
    flip-y: bool
  }

  variant gpu-image-copy-external-image-source {
    html-video-element(u32)
  }

  type gpu-origin-d2 = list<gpu-integer-coordinate>;

  /// Command Buffers

  /// GPUCommandBuffer
  resource gpu-command-buffer {

  }

  record gpu-command-buffer-descriptor {
    label: option<string>
  }


  /// Command Encoding

  // GPUCommandEncoder
  resource gpu-command-encoder {
    begin-render-pass: func(descriptor: gpu-render-pass-descriptor) -> gpu-render-pass-encoder;
    begin-compute-pass: func(descriptor: option<gpu-compute-pass-descriptor>) -> gpu-compute-pass-encoder;
    copy-buffer-to-buffer: func(source: borrow<gpu-buffer>, source-offset: gpu-size-u64, destination: borrow<gpu-buffer>, destination-offset: gpu-size-u64, size: gpu-size-u64);
    copy-buffer-to-texture: func(source: gpu-image-copy-buffer, destination: gpu-image-copy-texture, copy-size: gpu-extent-d3);
    copy-texture-to-buffer: func(source: gpu-image-copy-texture, destination: gpu-image-copy-buffer, copy-size: gpu-extent-d3);
    copy-texture-to-texture: func(source: gpu-image-copy-texture, destination: gpu-image-copy-texture, copy-size: gpu-extent-d3);
    clear-buffer: func(buffer: borrow<gpu-buffer>, offset: option<gpu-size-u64>, size: option<gpu-size-u64>);
    write-timestamp: func(query-set: borrow<gpu-query-set>, query-index: gpu-size-u32);
    resolve-query-set: func(query-set: borrow<gpu-query-set>, first-query: gpu-size-u32, query-count: gpu-size-u32, destination: borrow<gpu-buffer>, destination-offset: gpu-size-u64);
    finish: func() -> gpu-command-buffer;
  }

  record gpu-command-encoder-descriptor {
    label: option<string>
  }

  /// Compute Passes

  /// GPUComputePassEncoder
  resource gpu-compute-pass-encoder {
    set-pipeline: func(pipeline: borrow<gpu-compute-pipeline>);
    dispatch-workgroups: func(workgroup-count-x: gpu-size-u32, workgroup-count-y: option<gpu-size-u32>, workgroup-count-z: option<gpu-size-u32>);
    dispatch-workgroups-indirect: func(indirect-buffer: borrow<gpu-buffer>, indirect-offset: gpu-size-u64);
    end: func();

    set-bind-group: func(index: gpu-index-u32, bind-group: option<borrow<gpu-bind-group>>, dynamic-offsets: option<list<gpu-buffer-dynamic-offset>>);
    set-bind-group-with-data: func(index: gpu-index-u32, bind-group: option<borrow<gpu-bind-group>>, dynamic-offsets-data: list<u32>, dynamic-offsets-data-start: gpu-size-u64, dynamic-offsets-data-lengh: gpu-size-u32);

    push-debug-group: func(group-label: string);
    pop-debug-group: func();
    insert-debug-marker: func(marker-label: string);
  }
  
  record gpu-compute-pass-descriptor {
    label: option<string>,
    timestamp-writes: gpu-compute-pass-timestamp-writes
  }

  record gpu-compute-pass-timestamp-writes {
    query-set: borrow<gpu-query-set>,
    beginning-of-pass-write-index: option<gpu-size-u32>,
    end-of-pass-write-index: option<gpu-size-u32>
  }

  /// GPURenderPassEncoder
  resource gpu-render-pass-encoder {
    set-pipeline: func(pipeline: borrow<gpu-render-pipeline>);
    set-index-buffer: func(buffer: borrow<gpu-buffer>, index-format: gpu-index-format, offset: gpu-size-u64, size: option<gpu-size-u64>);
    set-vertex-buffer: func(slot: gpu-index-u32, buffer: borrow<gpu-buffer>, offset: gpu-size-u64, size: option<gpu-size-u64>);
    draw: func(vertex-count: gpu-size-u32, instance-count: gpu-size-u32, first-vertex: gpu-size-u32, first-instance: gpu-size-u32);
    draw-indexed: func(index-count: gpu-size-u32, instance-count: gpu-size-u32, first-index: gpu-size-u32, base-vertex: gpu-signed-offset-s32, first-instance: gpu-size-u32);
    draw-indirect: func(indirect-buffer: borrow<gpu-buffer>, indirect-offset: gpu-size-u64);
    draw-indexed-indirect: func(indirect-buffer: borrow<gpu-buffer>, indirect-offset: gpu-size-u64);

    set-viewport: func(x: f32, y: f32, width: f32, height: f32, min-depth: f32, max-depth: f32);
    set-scissor-rect: func(x: gpu-integer-coordinate, y: gpu-integer-coordinate, width: gpu-integer-coordinate, height: gpu-integer-coordinate);
    set-blend-constant: func(color: gpu-color);
    set-stencil-reference: func(reference: gpu-stencil-value);
    begin-occlusion-query: func(query-index: gpu-size-u32);
    end-occlusion-query: func();
    execute-bundles: func(bundles: list<borrow<gpu-render-bundle>>);
    end: func();

    set-bind-group: func(index: gpu-index-u32, bind-group: option<borrow<gpu-bind-group>>, dynamic-offsets: option<list<gpu-buffer-dynamic-offset>>);
    set-bind-group-with-data: func(index: gpu-index-u32, bind-group: option<borrow<gpu-bind-group>>, dynamic-offsets-data: list<u32>, dynamic-offsets-data-start: gpu-size-u64, dynamic-offsets-data-lengh: gpu-size-u32);

    push-debug-group: func(group-label: string);
    pop-debug-group: func();
    insert-debug-marker: func(marker-label: string);
  }

  record gpu-render-pass-descriptor {
    color-attachments: list<gpu-render-pass-color-attachment>,
    depth-stencil-attachment: option<gpu-render-pass-depth-stencil-attachment>,
    occlusion-query-set: option<borrow<gpu-query-set>>,
    timestamp-writes: option<gpu-render-pass-timestamp-writes>,
    max-draw-count: option<gpu-size-u64>
  }

  record gpu-render-pass-color-attachment {
    view: borrow<gpu-texture-view>,
    resolve-target: option<borrow<gpu-texture-view>>,
    clear-value: option<gpu-color>,
    load-op: gpu-load-op,
    store-op: gpu-store-op
  }

  type gpu-color = list<f64>;

  enum gpu-load-op {
    load,
    clear
  }

  enum gpu-store-op {
    store,
    discard
  }

  record gpu-render-pass-depth-stencil-attachment {
    view: borrow<gpu-texture-view>,
    depth-clear-value: f32,
    depth-load-op: gpu-load-op,
    depth-store-op: gpu-store-op,
    depth-read-only: bool,
    stencil-clear-value: gpu-stencil-value,
    stencil-load-op: gpu-load-op,
    stencil-store-op: gpu-store-op,
    stencil-read-only: bool
  }
  
  record gpu-render-pass-timestamp-writes {
    query-set: borrow<gpu-query-set>,
    beginning-of-pass-write-index: option<gpu-size-u32>,
    end-of-pass-write-index: option<gpu-size-u32>
  }

  /// Bundles

  /// GPURenderBundle
  resource gpu-render-bundle {
    
  }

  resource gpu-render-bundle-encoder {
    finish: func(descriptor: gpu-render-bundle-descriptor) -> gpu-render-bundle;
  }

  record gpu-render-bundle-descriptor {
    label: string
  }
}
